col1, col2 = st.columns(2)

# üìä Radar Chart (Your Scores)
with col1:
    st.markdown("""<div class="card"><h4>üï∏Ô∏è Lifestyle Scores Radar</h4></div>""", unsafe_allow_html=True)

    radar_fig = go.Figure()
    categories = ['Burnout', 'Stress', 'Stress/Hour', 'Wellbeing', 'Sleep Quality', 'Mental Fatigue']
    values = [burnout, stress_level, stress_per_hr, well_score, sleep_quality, mental_fatigue]

    radar_fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name='Your Scores',
        line=dict(color='royalblue')
    ))

    radar_fig.update_layout(
        polar=dict(radialaxis=dict(visible=True, range=[0, 10])),
        showlegend=False,
        margin=dict(t=20, b=20, l=20, r=20),
        height=400
    )

    st.plotly_chart(radar_fig, use_container_width=True)

# üìà Trendline vs Peers
with col2:
    if st.session_state.predictions is not None:
        st.markdown("""<div class="card"><h4>üìà Trendline vs Peers</h4></div>""", unsafe_allow_html=True)

        peer_df = pd.read_csv("./data/comparisons.csv")
        national_avg = peer_df[peer_df["group"] == "National Average"].iloc[0, 1:].values
        selected_peer = peer_df[peer_df["group"] == selected_group].iloc[0, 1:].values
        user_scores = np.array(st.session_state.predictions[:6])

        score_labels = ["Burnout", "Stress Level", "Stress/Hour", "Wellbeing", "Sleep Quality", "Mental Fatigue"]
        df = pd.DataFrame({
            "Score Type": score_labels * 3,
            "Value": np.concatenate([user_scores, selected_peer[:6], national_avg[:6]]),
            "Source": ["You"] * 6 + [selected_group] * 6 + ["National Avg"] * 6
        })

        trend_fig = px.line(df, x="Score Type", y="Value", color="Source", markers=True)
        trend_fig.update_layout(
            height=400,
            margin=dict(l=20, r=20, t=20, b=20),
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color="#D2ECFF"),
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
        )
        st.plotly_chart(trend_fig, use_container_width=True)
